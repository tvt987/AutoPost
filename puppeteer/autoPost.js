const puppeteer = require("puppeteer");
const fs = require("fs");
const path = require("path");

async function autoPostToGroups(content, groupLinks, imagePaths = []) {
  const browser = await puppeteer.launch({
    headless: false,
    defaultViewport: null,
  });
  let page = await browser.newPage();

  const cookies = require("../cookies/fb-cookies.json");
  await page.setCookie(...cookies);

  const postedLinks = [];
  const wait = (ms) => new Promise((resolve) => setTimeout(resolve, ms));
  const maxRetries = 3;

  for (const groupLink of groupLinks) {
    let retryCount = 0;

    while (retryCount < maxRetries) {
      try {
        console.log(
          `ƒêang ƒëƒÉng b√†i v√†o nh√≥m: ${groupLink} (l·∫ßn th·ª≠ ${
            retryCount + 1
          }/${maxRetries})`
        );

        // Truy c·∫≠p v√†o nh√≥m
        await page.goto(groupLink, {
          waitUntil: "networkidle2",
          timeout: 60000,
        });
        await wait(5000);

        // Click v√†o √¥ "Create Post" ho·∫∑c "Write something..."
        await page.evaluate(() => {
          const createPostButton = Array.from(
            document.querySelectorAll('div[role="button"]')
          ).find(
            (el) =>
              el.textContent.includes("Write something") ||
              el.textContent.includes("Create post") ||
              el.textContent.includes("What's on your mind")
          );
          if (createPostButton) createPostButton.click();
        });
        await wait(3000);

        // Nh·∫≠p n·ªôi dung b√†i vi·∫øt
        await page.keyboard.type(content);
        await wait(2000);

        // N·∫øu c√≥ ·∫£nh, x·ª≠ l√Ω upload ·∫£nh
        if (imagePaths && imagePaths.length > 0) {
          try {
            console.log("B∆∞·ªõc 1: Click v√†o n√∫t Photo/Video...");
            // Click v√†o n√∫t Photo/Video (n√∫t m√†u xanh l√°)
            await page.evaluate(() => {
              const buttons = Array.from(
                document.querySelectorAll(
                  'div[aria-label="Photo/Video"], div[role="button"]'
                )
              );
              const photoButton = buttons.find((el) => {
                const text = el.textContent.toLowerCase();
                return (
                  text.includes("photo/video") ||
                  text.includes("photo") ||
                  text.includes("·∫£nh/video")
                );
              });
              if (photoButton) {
                photoButton.click();
              }
            });
            await wait(2000);

            console.log("B∆∞·ªõc 2: ƒê·ª£i v√† click v√†o n√∫t Add photos/videos...");
            // Click v√†o n√∫t "Add photos/videos"
            const addButtonResult = await page.evaluate(() => {
              // T√¨m theo class v√† role
              const addButton = document.querySelector(
                'div[role="button"].x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy.xa49m3k.xqeqjp1.x2hbi6w.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xdl72j9.x2lah0s.xe8uvvx.xdj266r.x11i5rnm.xat24cr.x1mh8g0r.x2lwn1j.xeuugli.xexx8yu.x4uap5.x18d9i69.xkhd6sd.x1n2onr6.x16tdsg8.x1hl2dhg.xggy1nq.x1ja2u2z.x1t137rt.x1o1ewxj.x3x9cwd.x1e5q0jg.x13rtm0m.x3nfvp2.x1q0g3np.x87ps6o.x1lku1pv.x1a2a7pz'
              );

              if (addButton) {
                console.log("T√¨m th·∫•y n√∫t Add photos/videos theo class");
                addButton.click();
                return true;
              }

              return false;
            });
            console.log("K·∫øt qu·∫£ t√¨m n√∫t Add photos/videos:", addButtonResult);
            await wait(2000);

            console.log("B∆∞·ªõc 3: ƒê·ª£i v√† click v√†o n√∫t Add t·ª´ thi·∫øt b·ªã...");
            // Click v√†o n√∫t "Add photos and videos from your device"
            const [fileChooser] = await Promise.all([
              page.waitForFileChooser({ timeout: 10000 }),
              page.evaluate(() => {
                // T√¨m theo text trong span
                const deviceButton = Array.from(
                  document.querySelectorAll("span")
                ).find((el) => {
                  const text = el.textContent.trim().toLowerCase();
                  return (
                    text.includes("from your device") ||
                    text.includes("t·ª´ thi·∫øt b·ªã c·ªßa b·∫°n") ||
                    text.includes("add photos and videos") ||
                    text.includes("th√™m ·∫£nh v√† video")
                  );
                });

                if (deviceButton) {
                  console.log("T√¨m th·∫•y n√∫t device theo text");
                  deviceButton.click();
                  return true;
                }

                // N·∫øu kh√¥ng t√¨m th·∫•y theo text, th·ª≠ t√¨m theo class
                const deviceButtonByClass = document.querySelector(
                  'div[role="button"].x1i10hfl.x1qjc9v5.xjbqb8w.xjqpnuy.xa49m3k.xqeqjp1.x2hbi6w.x13fuv20.xu3j5b3.x1q0q8m5.x26u7qi.x972fbf.xcfux6l.x1qhh985.xm0m39n.x9f619.x1ypdohk.xdl72j9.x2lah0s.xe8uvvx.xdj266r.x11i5rnm.xat24cr.x1mh8g0r.x2lwn1j.xeuugli.xexx8yu.x4uap5.x18d9i69.xkhd6sd.x1n2onr6.x16tdsg8.x1hl2dhg.xggy1nq.x1ja2u2z.x1t137rt.x1o1ewxj.x3x9cwd.x1e5q0jg.x13rtm0m.x3nfvp2.x1q0g3np.x87ps6o.x1lku1pv.x1a2a7pz'
                );

                if (deviceButtonByClass) {
                  console.log("T√¨m th·∫•y n√∫t device theo class");
                  deviceButtonByClass.click();
                  return true;
                }

                return false;
              }),
            ]);
            console.log("ƒê√£ m·ªü file chooser");

            // Upload t·∫•t c·∫£ c√°c ·∫£nh
            console.log("B∆∞·ªõc 4: Upload ·∫£nh...");
            await fileChooser.accept(imagePaths);
            console.log("üñºÔ∏è ƒê√£ upload ·∫£nh th√†nh c√¥ng");
            await wait(8000); // ƒê·ª£i ·∫£nh upload xong
          } catch (error) {
            console.log("‚ö†Ô∏è L·ªói khi upload ·∫£nh:", error.message);
            // Th·ª≠ ph∆∞∆°ng ph√°p kh√°c n·∫øu th·∫•t b·∫°i
            try {
              console.log("ƒêang th·ª≠ ph∆∞∆°ng ph√°p upload ·∫£nh thay th·∫ø...");
              const [fileChooser] = await Promise.all([
                page.waitForFileChooser({ timeout: 10000 }),
                page.click('div[aria-label="Photo/video"]'),
              ]);
              await fileChooser.accept(imagePaths);
              console.log("üñºÔ∏è ƒê√£ upload ·∫£nh th√†nh c√¥ng (ph∆∞∆°ng ph√°p 2)");
              await wait(8000);
            } catch (error2) {
              console.log(
                "‚ö†Ô∏è L·ªói khi th·ª≠ ph∆∞∆°ng ph√°p upload ·∫£nh th·ª© 2:",
                error2.message
              );
            }
          }
        }

        // Click n√∫t Post
        await page.evaluate(() => {
          const buttons = Array.from(
            document.querySelectorAll('div[role="button"]')
          );
          const postButton = buttons.find((el) => {
            const text = el.textContent.trim().toLowerCase();
            return text === "post" || text === "ƒëƒÉng";
          });
          if (postButton) {
            postButton.click();
          }
        });

        console.log("ƒêang ƒë·ª£i b√†i ƒëƒÉng xu·∫•t hi·ªán...");
        await wait(20000);

        // T√¨m link b√†i vi·∫øt sau khi ƒëƒÉng
        const postLink = await page.evaluate(() => {
          // T√¨m link theo nhi·ªÅu c√°ch kh√°c nhau
          const timeLink =
            document.querySelector('a[href*="permalink"]') ||
            document.querySelector('a[href*="posts"]') ||
            document.querySelector('a[href*="groups"][href*="__cft__"]');
          return timeLink ? timeLink.href : null;
        });

        if (postLink) {
          console.log("‚úÖ ƒêƒÉng b√†i th√†nh c√¥ng:", postLink);
          postedLinks.push({
            group: groupLink,
            status: "success",
            postLink: postLink,
            content,
            postedAt: new Date().toISOString(),
          });
          break; // Tho√°t kh·ªèi v√≤ng l·∫∑p retry n·∫øu th√†nh c√¥ng
        } else {
          throw new Error("Kh√¥ng t√¨m th·∫•y link b√†i vi·∫øt sau khi ƒëƒÉng");
        }
      } catch (error) {
        console.log(`‚ùå L·ªói: ${error.message}`);

        if (error.message.includes("Navigating frame was detached")) {
          console.log("ƒêang t·∫°o l·∫°i page m·ªõi...");
          try {
            await page.close().catch(() => {});
            page = await browser.newPage();
            await page.setCookie(...cookies);
            console.log("‚úÖ ƒê√£ t·∫°o l·∫°i page m·ªõi.");
          } catch (pageError) {
            console.log(`‚ùå L·ªói khi t·∫°o l·∫°i page: ${pageError.message}`);
          }
        }

        postedLinks.push({
          group: groupLink,
          status: "error",
          error: error.message,
          content,
          postedAt: new Date().toISOString(),
        });

        retryCount++;
        if (retryCount < maxRetries) {
          console.log(`Th·ª≠ l·∫°i sau 10 gi√¢y...`);
          await wait(10000);
        }
      }
    }
  }

  await browser.close();
  fs.writeFileSync("posted_links.json", JSON.stringify(postedLinks, null, 2));
  return postedLinks;
}

module.exports = { autoPostToGroups };
